" Environment
set directory=$XDG_CACHE_HOME/vim,/tmp,~/
set backupdir=$XDG_CACHE_HOME/vim,/tmp,~/
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$HOME/.vim,$XDG_CONFIG_HOME/vim,$VIM,$VIMRUNTIME
let $MYVIMRC="$HOME/.vim/vimrc"

" enable vim features instead of strict vi compatibility
set nocompatible

" reset to the default in case some distro config fucks it up
set modeline
set modelines=5

" do not wrap long lines; have them scroll off the side
set nowrap

" try to detect the filetype
filetype on

" enable syntax highlighting
syntax on

" enable loading the plugin file for specific file types
filetype plugin on

" enable loading the indent file for specific file types
filetype indent on

" reload a file when changed outside of vim
set autoread

" tell vim it's OK to use 256 colors at the terminal
set t_Co=256

" disable bell completely
set visualbell
set t_vb=

" show matching brackets and parens
set showmatch

" use pop-up menu for tab completion of filenames
set wildmenu

" sync syntax highlighting from the start of the file
syntax sync fromstart

" override syntax highlighting for some files
au BufReadPost *rtorrent.rc set ft=dosini

" set character encoding to UTF-8
set encoding=utf-8

" show 3 lines above or below cursor when scrolling
set scrolloff=3

" show insert, replace, or visual mode in last line
set showmode

" show command in last line
set showcmd

" highlight the line the cursor is on
set cursorline
hi CursorLine cterm=NONE ctermbg=235 ctermfg=NONE

" turn on line numbers
set number
hi LineNr ctermfg=240
hi CursorLineNr cterm=NONE ctermfg=253 ctermbg=235

" assumes fast connection
set ttyfast

" remember more commands and search history
set history=500

" show line and column number
set ruler

" every window gets a status line
set laststatus=2

" make command line one line high
set ch=1

" turn off mouse pointer when typing begins
set mousehide

" put mouse in command-line mode, so mouse clicks don't move cursor
set mouse=c

" disable .netrwhist file
let g:netrw_dirhistmax = 0

" show whitespace (but not too much)
set list
set listchars=tab:··,eol:¬,trail:~
hi NonText ctermfg=239 ctermbg=none
hi SpecialKey ctermfg=239 ctermbg=none

" Wrap Markdown text at 80 characters
au BufRead,BufNewFile *.md setlocal textwidth=80

""""""""""""""""""""""""""""""""""""""""""""""""""
" Search options
""""""""""""""""""""""""""""""""""""""""""""""""""

" Ignore case on search
set ignorecase

" Ignore case unless there is an uppercase letter in the pattern
set smartcase

" Find as you type
set incsearch

" Highlight matched strings
set hlsearch

""""""""""""""""""""""""""""""""""""""""""""""""""
" Indentation options
""""""""""""""""""""""""""""""""""""""""""""""""""

" The length of a tab
set tabstop=2

" The number of spaces inserted/removed when using < or >
set shiftwidth=2

" The number of spaces inserted when you press tab.
" -1 means the same value as shiftwidth
set softtabstop=-1

" Insert spaces instead of tabs
set expandtab

" When tabbing manually, use shiftwidth instead of tabstop and softtabstop
set smarttab

" Set basic indenting (i.e. copy the indentation of the previous line)
" When filetype detection didn't find a fancy indentation scheme
set autoindent

""""""""""""""""""""""""""""""""""""""""""""""""""
" Miscellaneous
""""""""""""""""""""""""""""""""""""""""""""""""""

" Persistent undo
if version >= 703
  set undofile
  set undodir=$HOME/.cache/vim/undo
  silent !mkdir -p $HOME/.cache/vim/undo
  set undolevels=2000
endif


" Orange cursor in insert mode
if &term =~ "xterm\\|rxvt"
  let &t_SI = "\<Esc>]12;orange\x7"
  let &t_EI = "\<Esc>]12;gray\x7"
  silent !echo -ne "\033]12;gray\007"
  autocmd VimLeave * silent !echo -ne "\033]12;gray\007"
endif


" :[range]SortGroup[!] [n|f|o|b|x] /{pattern}/
" e.g. :SortGroup /^header/
" e.g. :SortGroup n /^header/
" See :h :sort for details

function! s:sort_by_header(bang, pat) range
  let pat = a:pat
  let opts = ""
  if pat =~ '^\s*[nfxbo]\s'
    let opts = matchstr(pat, '^\s*\zs[nfxbo]')
    let pat = matchstr(pat, '^\s*[nfxbo]\s*\zs.*')
  endif
  let pat = substitute(pat, '^\s*', '', '')
  let pat = substitute(pat, '\s*$', '', '')
  let sep = '/'
  if len(pat) > 0 && pat[0] == matchstr(pat, '.$') && pat[0] =~ '\W'
    let [sep, pat] = [pat[0], pat[1:-2]]
  endif
  if pat == ''
    let pat = @/
  endif

  let ranges = []
  execute a:firstline . ',' . a:lastline . 'g' . sep . pat . sep . 'call add(ranges, line("."))'

  let converters = {
        \ 'n': {s-> str2nr(matchstr(s, '-\?\d\+.*'))},
        \ 'x': {s-> str2nr(matchstr(s, '-\?\%(0[xX]\)\?\x\+.*'), 16)},
        \ 'o': {s-> str2nr(matchstr(s, '-\?\%(0\)\?\x\+.*'), 8)},
        \ 'b': {s-> str2nr(matchstr(s, '-\?\%(0[bB]\)\?\x\+.*'), 2)},
        \ 'f': {s-> str2float(matchstr(s, '-\?\d\+.*'))},
        \ }
  let arr = []
  for i in range(len(ranges))
    let end = max([get(ranges, i+1, a:lastline+1) - 1, ranges[i]])
    let line = getline(ranges[i])
    let d = {}
    let d.key = call(get(converters, opts, {s->s}), [strpart(line, match(line, pat))])
    let d.group = getline(ranges[i], end)
    call add(arr, d)
  endfor
  call sort(arr, {a,b -> a.key == b.key ? 0 : (a.key < b.key ? -1 : 1)})
  if a:bang
    call reverse(arr)
  endif
  let lines = []
  call map(arr, 'extend(lines, v:val.group)')
  let start = max([a:firstline, get(ranges, 0, 0)])
  call setline(start, lines)
  call setpos("'[", start)
  call setpos("']", start+len(lines)-1)
endfunction
command! -range=% -bang -nargs=+ SortGroup <line1>,<line2>call <SID>sort_by_header(<bang>0, <q-args>)

" Disable indentLine plugin quotes hiding
let g:indentLine_setConceal = 0


""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin('~/.vim/plugged')

Plug 'cespare/vim-toml'
Plug 'hashivim/vim-terraform'
Plug 'junegunn/goyo.vim'
Plug 'tpope/vim-commentary'
Plug 'dense-analysis/ale'
Plug 'Yggdroot/indentLine'
Plug 'editorconfig/editorconfig-vim'

call plug#end()
